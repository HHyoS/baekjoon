#include <string>
#include <map>
#include <utility>
#include <iostream>
#include <queue>
using namespace std;
pair<int, int> r;
pair<int, int> b;
pair<int, int> g;

pair<pair<int,int>,pair<int,int>> left(map<pair<int, int>, char> fd, pair<pair<int,int>, pair<int,int>> rb){
	int r_x = rb.first,first, r_y = rb.first.second;
	int b_x = rb.second.first, b_y = rb.second.second;
	if (r_x < b_x) {
		while (fd[{r_x, r_y}] != '#' || (g.first != r_x && g.second != r_y)) {
			--r_x;
		}
		while (fd[{b_x, b_y}] != '#' || r_x + 1 != b_x || (g.first != b_x && g.second != b_y)) {
			--b_x;
		}
	}
		return { {r_x,r_y},{b_x,b_y} };
}
void bfs(int count, map<pair<int, int>, char> fd, queue<pair<pair<int, int>, pair<int, int>>> que){
	if (count > 10)
		return;
	pair<pair<int, int>, pair<int, int>> temp;
	int r_x, r_y;
	int b_x, b_y;
	int size = que.size();
	for(int a = 0; a < size; ++a){
		r_x = que.front().first.first;
		r_y = que.front().first.second;
		b_x = que.front().second.first;
		b_y = que.front().second.second;

		temp = left(fd, que.front());
		if (temp != que.front())
			que.push(temp);
		temp = right();
		temp = up;
		temp = down;
}
int main() {
	int limit = 11;
	int x, y;
	map<pair<int, int>, char> fd;
	cin >> y >> x;
	char value;
	queue<pair<pair<int, int>, pair<int, int>>> que;
	for (int a = 0; a < x; ++a) {
		for (int c = 0; c < y; ++c) {
			cin >> value;
			if (value == 'R')
				r = { a,c };
			else if (value == 'B')
				b = { a,c };
			else if (value == 'O') {
				g = { a,c };
			}
			else
				fd[{a, c}] = value;
		}
	}
	que.push({ r,b });
	bfs(0, fd, que);
}
