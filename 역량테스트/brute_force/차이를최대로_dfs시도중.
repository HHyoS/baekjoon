#include <algorithm>
#include <iostream>
using namespace std;
#define MAX 8
int** ar = (int**)malloc(sizeof(int*) * MAX);
int n;
int big = 0;
void dfs(int now, int after,bool check[], int sum, int deep) {
    check[after] = true;
    if (now > after)
        sum += ar[after][now];
    else
        sum += ar[now][after];
    printf("now = %d, after = %d sum = %d\n",now,after, sum);
    if (deep == n) {
        if (big < sum)
            big = sum;
        return;
    }
    
    for (int a = 0; a < n; ++a) {
        if (check[a] == false) {
            dfs(after, a, check, sum, ++deep);
            check[a] = false;
        }
    }
}
int main() {
    cin >> n;
    int* before = (int*)malloc(sizeof(int) * n);
    bool check[MAX];
    for (int a = 0; a < n; ++a) {
        cin >> before[a];
        ar[a] = (int*)malloc(sizeof(int) * MAX);
    }
    for (int a = 0; a < n - 1; ++a) {
        for (int b = a + 1; b < n; ++b) {
            if (before[a] - before[b] < 0)
                ar[a][b] = before[b] - before[a];
            else
                ar[a][b] = before[a] - before[b];
        }
    }
    for (int a = 0; a < n; ++a) {
        for (int b = a + 1; b < n; ++b) {
            memset(check, false, sizeof(check));
            check[a] = true;
            dfs(a, b, check, 0, 2);
        }
    }
    printf("%d", big);
    return 0;
}
