문제 사이트 : https://www.acmicpc.net/problem/2156

설명
  효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.

  포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.

  연속으로 놓여 있는 3잔을 모두 마실 수는 없다.

  효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고,

  각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오. 

  예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면

  총 포도주 양이 33으로 최대로 마실 수 있다.
  

풀이
  주어진 조건에 맞게 마실 수 있는 최대량의 와인을 구하는 문제였습니다.
  
  주어진 조건에 맞춰 알고리즘을 풀이해나가기 위해 와인의 정보를 받는 arr배열과, 최대량을 담는 dp배열을 선언하였고,
  
  dp배열은 현재 와인을 안마시는 경우 dp[x][0], 현재 마시는 와인이 첫 잔인 경우dp[x][1], 현재 마시는 와인이
  
  두 번 연속 마시는 경우 dp[x][2] 세가지로 나누어 선언했습니다.
  
  그리고 초기값으로 dp[1][1], dp[2][1], dp[2][2] 를 초기값으로 선언하였고, 2중for문의 시작은 3부터 시작하도록 하였습니다.
  
  #include <cstdio>
#include <algorithm>
using namespace std;


int dp[10000 + 1][3] = { 0, };
int arr[10000 + 1] = { 0, };
int main() {
    int n;

    scanf("%d", &n);
    for (int a = 1; a <= n; ++a) {
        scanf("%d", &arr[a]); // 와인 정보 초기값 저장
    }
    dp[1][1] = arr[1];
    dp[2][1] = arr[2];
    dp[2][2] = arr[1] + arr[2]; // 와인 최대 시음량 저장

    
    for (int a = 3; a <= n; ++a) {
        for (int b = 0; b < 3; ++b) {
            if (b == 0) // 현재 와인을 마시지 않는 경우
                dp[a][b] = max({dp[a - 1][1], dp[a - 1][2],dp[a-2][1],dp[a-2][2]}); // dp[a-1][1] : 전의 단계에서 처음 마신경우, dp[a-1][2] : 전의 단계에서 두잔 연속으로 마신경우
                // dp[a-2][2] : 두번쨰 전의 단계에서 두잔을 다마신 경우

            else if (b == 1) // 현재 마시는 와인이 첫잔인경우
                dp[a][b] = max({dp[a-1][0]+arr[a],dp[a-2][1]+arr[a],dp[a-2][2]+arr[a]});
  // dp[a-1][0] : 전 단계에서 안마신경우, dp[a-2][1~2] : 두 단계 전에 한잔 또는 두잔 마신경우 ( dp[a-2][0] 은 두 단계 전에 한잔도 안마신 경우인데 두 단계전에 한잔도 안마신 상태는 
  최대값을 구할떄 의미없는 케이스 이기 때문에 제외
            else
                dp[a][b] = dp[a - 1][1] + arr[a]; // 현재 마시는 잔이 두 번 연속 마시는 경우는 전 단계에서 한잔 마신 경우만 존재
        }
    }
    printf("%d", max({ dp[n][0],dp[n][1],dp[n][2] })); // 마지막 단계에서 최대값 
    return 0;
}
