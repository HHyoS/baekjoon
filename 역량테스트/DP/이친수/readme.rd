문제 사이트 : https://www.acmicpc.net/problem/2193

설명
  0과 1로만 이루어진 수를 이진수라 한다. 이러한 이진수 중 특별한 성질을 갖는 것들이 있는데, 이들을 이친수(pinary number)라 한다. 이친수는 다음의 성질을 만족한다.

  이친수는 0으로 시작하지 않는다.
  이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.
  예를 들면 1, 10, 100, 101, 1000, 1001 등이 이친수가 된다. 하지만 0010101이나 101101은 각각 1, 2번 규칙에 위배되므로 이친수가 아니다.

  N(1 ≤ N ≤ 90)이 주어졌을 때, N자리 이친수의 개수를 구하는 프로그램을 작성하시오.
  

풀이

  주어진 조건과 입력된 N을 이용하여 N자리의 이친수의 갯수를 구하는 프로그램을 만드는 문제였습니다.
  해당 문제의 주요 조건인 1이 반복되지 않아야 한다는 조건을 맞춰 규칙을 찾기위해 0으로 끝나는 이친수와
  1로 끝나는 이친수로 나누어 규칙을 찾아보았을때 다음과 같은 규칙이 있음을 확인했습니다.
  
  f(N)[0](0으로 끝나는 N자리의 이친수의 갯수) 는 f(N-1)[0] + f(N-1)[1]이고, f(N)[1] = f(N-1)[0].
  
  위의 조건을 이용하여 코딩을 진행하였고, 코드와 설명은 다음과 같습니다.  
  
  #include <cstdio>
using namespace std;


long long dp[2][2] = { 0, }; // N의 값이 최대 91이므로 숫자가 매우 커질 수 있어 long long 타입, 새로운 f(N)은 f(N-1) 번째의 숫자만 필요로 하므로 2 x 2 사이즈의 long long배열 선언 
int main() {
    int n;
    scanf("%d", &n); // N자리의 이친수 입력
    dp[1][0] = 0; 
    dp[1][1] = 1; // f(1) 일때 초기값 설정. 2 x 2 사이즈의 배열을 사용하므로 f(1)~f(N) 단계까지 구할 떄, (단계) % 2 연산을 통해 배열 저장위치 생성하기 떄문에 dp[1]의 위치에 초기값 설정
    for (int a = 2; a <= n; ++a) {
        int m = a % 2; // 갱신 할 배열의 위치 m
        dp[m][0] = dp[!m][0] + dp[!m][1]; // 이전단계의 이친수 갯수의 합
        dp[m][1] = dp[!m][0]; // 전 단계에서 f(a)[0] 의 값을 f(x)[1] 에 저장
    }



    printf("%lld", dp[n % 2][0] + dp[n % 2][1]); // n단계까지 이친수의 합을 출력
    return 0;
}
